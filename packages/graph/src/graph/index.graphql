type Query {
  ping: String!
  currentUser: User
  checkSession(input: SessionTokenInput!): Authentication
  userAccounts: [Account]
  signImageUpload(input: ImageUploadInput!): SignedImageLocation!
}

type Mutation {
  createUser(input: CreateUserInput!): User
  createAccount(input: CreateAccountInput!): Account
  loginUser(input: LoginInput!): Authentication
  deleteSession: String
}

type SignedImageLocation {
  url: String!
  key: String!
  expires: Int!
}

input ImageUploadInput {
  name: String!
  size: Int!
  type: String!
}

input NewAccountPayloadInput {
  name: String!
}

input CreateAccountInput {
  # captcha: String
  payload: NewAccountPayloadInput
}

input NewUserPayloadInput {
  email: String!
  password: String!
  givenName: String!
  familyName: String!
}

input CreateUserInput {
  # captcha: String
  payload: NewUserPayloadInput
}

input SessionTokenInput {
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Session {
  id: String!
  uid: String!
  cre: Int!
  exp: Int!
  token: String!
}

type Authentication {
  user: User!
  session: Session!
}

type User {
  id: String!
  email: String!
  givenName: String
  familyName: String
  logins: Int
  photoURL: String
  activeAccount: Account
  accounts: [Account]
}

type Account {
  id: String!
  name: String!
  users: [User]
  photoURL: String
}


