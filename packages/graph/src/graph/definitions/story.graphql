type Query {
  allStories(pagination: PaginationInput = {}, sort: StorySortInput = {}): StoryConnection!
  searchStories(pagination: PaginationInput = {}, phrase: String!): StoryConnection!
  autocompleteStories(pagination: PaginationInput = {}, phrase: String!): StoryConnection!
  story(input: ModelIdInput!): Story!
}

type Mutation {
  createStory(input: CreateStoryInput!): Story!
  updateStory(input: UpdateStoryInput!): Story!
  deleteStory(input: ModelIdInput!): String!
  # An empty imageId will unset the primary image.
  storyPrimaryImage(storyId: String!, imageId: String): Story!
  removeStoryImage(storyId: String!, imageId: String!): Story!
  addStoryImage(storyId: String!, imageId: String!): Story!
}

enum StorySortField {
  title
  createdAt
  updatedAt
  publishedAt
}

enum StoryStatus {
  Deleted
  Placeholder
  Published
  Scheduled
  Draft
}

type Story implements UserAttribution & Timestampable {
  id: String!
  title: String!
  slug: String!
  advertiser: Advertiser!
  teaser: String
  body: String
  status: StoryStatus!
  placeholder: Boolean!
  deleted: Boolean!
  publishedAt: Date
  primaryImage: Image
  images: [Image]
  campaigns(pagination: PaginationInput = {}, sort: CampaignSortInput = {}): CampaignConnection!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
  updatedBy: User!
}

type StoryConnection {
  totalCount: Int!
  edges: [StoryEdge]!
  pageInfo: PageInfo!
}

type StoryEdge {
  node: Story!
  cursor: Cursor!
}

input StorySearchInput {
  typeahead: StoryTypeAheadInput!
}

input StoryTypeAheadInput {
  field: StoryTypeAheadField!
  term: String!
}

enum StoryTypeAheadField {
  title
}

input StorySortInput {
  field: StorySortField! = createdAt
  order: Int! = -1
}

input StoryPayloadInput {
  title: String!
  teaser: String
  body: String
  advertiserId: String!
  publishedAt: Date
}

input CreateStoryInput {
  payload: StoryPayloadInput!
}

input UpdateStoryInput {
  id: String!
  payload: StoryPayloadInput!
}
