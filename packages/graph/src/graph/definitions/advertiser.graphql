type Query {
  allAdvertisers(pagination: PaginationInput = {}, sort: AdvertiserSortInput = {}): AdvertiserConnection!
  searchAdvertisers(pagination: PaginationInput = {}, phrase: String!): AdvertiserConnection!
  autocompleteAdvertisers(pagination: PaginationInput = {}, phrase: String!): AdvertiserConnection!
  advertiser(input: ModelIdInput!): Advertiser!
  advertiserHash(input: AdvertiserHashInput!): Advertiser!
}

type Mutation {
  createAdvertiser(input: CreateAdvertiserInput!): Advertiser!
  updateAdvertiser(input: UpdateAdvertiserInput!): Advertiser!
  advertiserLogo(input: AdvertiserLogoInput!): Advertiser!

  setAdvertiserContacts(input: SetContactsInput!): Advertiser!
}

enum AdvertiserSortField {
  name
  createdAt
  updatedAt
}

type Advertiser {
  id: String!
  hash: String!
  name: String!
  logo: Image
  createdAt: Date
  updatedAt: Date
  campaigns: [Campaign]
  campaignCount: Int
  notify: NotificationLists
}

type AdvertiserConnection {
  totalCount: Int!
  edges: [AdvertiserEdge]!
  pageInfo: PageInfo!
}

type AdvertiserEdge {
  node: Advertiser!
  cursor: Cursor!
}

input AdvertiserSearchInput {
  typeahead: AdvertiserTypeaheadInput!
}

input AdvertiserTypeaheadInput {
  field: AdvertiserTypeAheadField!
  term: String!
}

enum AdvertiserTypeAheadField {
  name
}

input AdvertiserSortInput {
  field: AdvertiserSortField! = createdAt
  order: Int! = -1
}

input AdvertiserPayloadInput {
  name: String!
  notify: AdvertiserContactsInput
}

input AdvertiserContactsInput {
  internal: [String!]!
  external: [String!]!
}

input CreateAdvertiserInput {
  payload: AdvertiserPayloadInput!
}

input UpdateAdvertiserInput {
  id: String!
  payload: AdvertiserPayloadInput!
}

input AdvertiserLogoInput {
  id: String!
  imageId: String
}

input AdvertiserHashInput {
  hash: String!
}
